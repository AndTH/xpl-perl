#!/usr/bin/perl -w

# $Id: xpl-dmx 151 2006-05-27 10:53:39Z beanz $

=head1 NAME

xpl-dmx - Perl script for an xPL DMX Transmitter application

=head1 SYNOPSIS

  # show usage message
  xpl-dmx -h

  # start the dmx application on first ethernet interface in verbose mode
  xpl-dmx -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that interfaces with DMX Transmitter from
Milford Instruments.

=cut

use strict;
use warnings;
use English qw/-no_match_vars/;
use FileHandle;
use Getopt::Std;
use xPL::Client;
$|=1; # autoflush helps debugging

sub HELP_MESSAGE {
  my $msg = shift || q{};
  die
qq{Usage: $0 [flags] [options] <device>
where valid flags are:
  -h - show this help text
  -v - verbose mode
and valid options are (default shown in brackets):
  -i if0  - the inferface for xPL messages (first non-loopback or loopback)
  -B baud - the baud rate (9600)
$msg
};
}

my %opt = ();
getopts('hvi:b:B:c:', \%opt);
if (exists $opt{'h'}) {
  HELP_MESSAGE()
}
my $dev = shift or die HELP_MESSAGE("The device parameter is required");
my $baud = exists $opt{'B'} ? $opt{'B'} : 9600;
my $verbose = exists $opt{'v'};
my $rgb_txt = exists $opt{'c'} ? $opt{'c'} : "/etc/X11/rgb.txt";

my %args =
  (
   vendor_id => "bnz",
   device_id => "dmx",
  );
if (exists $opt{'i'}) {
  $args{interface} = $opt{'i'};
}
if (exists $opt{'v'}) {
  $args{verbose} = $opt{'v'};
}

# Create an xPL Client object
my $xpl = xPL::Client->new(%args) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'dmx',
                       filter => {
                                  message_type => 'xpl-cmnd',
                                  class => 'dmx',
                                  class_type => 'basic',
                                  type => 'set',
                                 },
                       callback => \&xpl_in);

my $rgb = read_rgb_txt($rgb_txt) or die "Failed to read $rgb_txt: $!\n";

# TODO: use Device::SerialPort?
system("/bin/stty -F $dev ospeed $baud pass8 raw -echo >/dev/null") == 0 or
  die "Setting serial port with stty failed: $!\n";
my $fh = FileHandle->new;
sysopen($fh, $dev,O_RDWR|O_NOCTTY|O_NDELAY)
  or die "Cannot open serial connection on device '$dev'\n";
$fh->autoflush(1);
binmode($fh);
$xpl->add_input(handle => $fh, callback => \&dmx_reader);

# Run the main loop
$xpl->main_loop();

=head2 C<xpl_in(%xpl_callback_parameters)>

This is the callback that processes incoming xPL messages.  It handles
the incoming control.basic schema messages.

=cut

sub xpl_in {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  if ($msg->message_type ne 'xpl-cmnd' ||
      $msg->class ne 'dmx' ||
      $msg->class_type ne 'basic' ||
      $msg->type ne "set") {
    print STDERR "Bad message got through the filter\n  ",$msg->summary,"\n";
    return 1;
  }

  if ($msg->base =~ /hex/) { # hack to aid debug
    send_dmx($msg->value);
    return 1;
  }
  return 1 unless ($msg->base =~ /^(\d+)(x(\d+))?$/);
  my $base = sprintf("%04x", $1);
  my $multi = $3 || 1;
  my $hex;
  if ($msg->value =~ /^0x([0-9a-f]+)/i) {
    $hex = $1;
  } elsif ($msg->value =~ /^(\d+)$/) {
    $hex = sprintf("%02x", $1);
  } elsif (exists $rgb->{lc $msg->value}) {
    $hex = $rgb->{lc $msg->value};
  } else {
    return 1;
  }
  my $comm = '01'.$base.($hex x $multi);
  send_dmx($comm);
  return 1;
}

=head2 C<dmx_reader()>

This is the callback that processes output from the DMX.  It is
responsible for sending out the sensor.basic xpl-trig messages.

=cut

sub dmx_reader {
  my $buf;
  my $bytes = $fh->sysread($buf, 512);
  return unless ($buf);
  my $line = unpack("H*", $buf);
  print $line,"\n" if ($verbose);
  return 1;
}

=head2 C<send_dmx( $message )>

This functions is used to send text commands to the DMX.

=cut

sub send_dmx {
  my $msg = shift;
  my $quiet = shift;
  print "Sending '$msg'\n" if (!$quiet && $verbose);
  my $raw = pack("H*", $msg);
  syswrite($fh, $raw, length($raw));
  $fh->flush();
}

=head2 C<read_rgb_txt( $file )>

This function reads the rgb.txt file to create a mapping of colour names
to rrggbb hex values.

=cut

sub read_rgb_txt {
  my $file = shift;
  my %rgb;
  my $rgb = FileHandle->new($file) || return;
  while (<$rgb>) {
    next unless (/^(\d+)\s+(\d+)\s+(\d+)\s+(.*)\s*$/);
    $rgb{lc $4} = sprintf("%02x%02x%02x", $1, $2, $3);
  }
  $rgb->close;
  return \%rgb;
}

# send a 'hbeat.end' message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

Milford Instruments website: http://www.milinst.com/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2006 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
