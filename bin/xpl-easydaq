#!/usr/bin/perl -w

=head1 NAME

xpl-easydaq - Perl script for an xPL EasyDAQ USB Relay client

=head1 SYNOPSIS

  xpl-easydaq [flags] [options] <device>
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0  - the interface for xPL messages (first non-loopback or loopback)
    -B baud - the baud rate (9600)

  # start the easydaq application on first ethernet interface in verbose mode
  xpl-easydaq -i eth0 -v /dev/ttyUSB6

=head1 DESCRIPTION

This script is an xPL client that interfaces with a EasyDAQ USB Relay
device.  It supports the use of control.basic messages with current
fields set to 'high', 'low', or 'pulse' with devices of the form 'oNN'
where NN is a number from 1 to 16.  There is no support for EasyDAQ
inputs.

This script may also work with other Audon devices which have similar
firmware.  For this reason, control.basic current=pulse messages are
handled in the manner expected by an SPO-RL8 Serial Relay device even
though these will be ignored by a EasyDAQ USB device.

=cut

use strict;
use warnings;
use English qw/-no_match_vars/;
use xPL::SerialClient;
use xPL::BinaryMessage;
$|=1; # autoflush helps debugging

{
 package Msg;
 use base 'xPL::BinaryMessage';
 sub new {
   my ($pkg, $letter, $number, $desc) = @_;
   return $pkg->SUPER::new(raw => pack('aC', $letter, $number),
                           desc => $desc);
 }
 1;
}

sub device_reader;

my $xpl = xPL::SerialClient->new(reader_callback => \&device_reader,
                                 ack_timeout => 0.05);

my $state = 0;

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'easydaq', callback => \&xpl_in,
                       filter => {
                                  message_type => 'xpl-cmnd',
                                  class => 'control',
                                  class_type => 'basic',
                                  type => 'output',
                                 });

$xpl->write(Msg->new('B', 0, 'set all ports to outputs'));

# Run the main loop
$xpl->main_loop();

=head2 C<xpl_in(%xpl_callback_parameters)>

This is the callback that processes incoming xPL messages.  It handles
the incoming control.basic schema messages.

=cut

sub xpl_in {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  if ($msg->device eq 'debug') {
    $xpl->write(Msg->new('A', 0, 'query status of outputs'));
  }
  return 1 unless ($msg->device =~ /^o(\d+)$/);
  my $num = $LAST_PAREN_MATCH;
  my $command = lc $msg->current;
  if ($command eq "high") {
    $state |= 1<<($num-1);
    $xpl->write(Msg->new('C', $state, "setting port $num high"));
  } elsif ($command eq "low") {
    $state &= 0xf^(1<<($num-1));
    $xpl->write(Msg->new('C', $state, "setting port $num low"));
  } elsif ($command eq "pulse") {
    $state |= 1<<($num-1);
    $xpl->write(Msg->new('C', $state, "setting port $num high"));
    $state &= 0xf^(1<<($num-1));
    $xpl->write(Msg->new('C', $state, "setting port $num low"));
  }
  return 1;
}

=head2 C<device_reader()>

This is the callback that processes output from the EasyDAQ.  It is
responsible for sending out the sensor.basic xpl-trig messages.

=cut

sub device_reader {
  my ($xpl, $buf, $last) = @_;
  print 'received: ', (unpack 'H*', $buf), "\n" if ($xpl->verbose);
  return '';
}

# send a 'hbeat.end' message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

EasyDAQ website: http://www.easydaq.com/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2009 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
