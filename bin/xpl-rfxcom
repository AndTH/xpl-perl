#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-rfxcom - Perl script for an xPL RFXCOM RF receiver application

=head1 SYNOPSIS

  xpl-rfxcom [flags] [options] <device>
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0  - the interface for xPL messages (first non-loopback or loopback)
    -B baud - the baud rate (4800)

  # start the rfxcom application on first ethernet interface in verbose mode
  xpl-rfxcom -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that interfaces with an RFXCOM RF receiver.

=cut

use strict;
use warnings;
use xPL::SerialClient;
use xPL::SerialClient::BinaryMessage;
use xPL::RF qw/:all/;
$|=1; # autoflush helps debugging

{ # shortcut to save typing
  package Msg;
  use base 'xPL::SerialClient::BinaryMessage';
  1;
}

sub device_reader;

# We discard (incomplete) data in the buffer if last read was more
# than 30ms ago - in line with Bert's comments on xPL list
my $xpl = xPL::SerialClient->new(baud => 4800,
                                 reader_callback => \&device_reader,
                                 discard_buffer_timeout => 0.03) or
  die "Failed to create xPL::Client\n";

my $rf = xPL::RF->new(source => $xpl->id) or
  die "Failed to create RF decode object\n";


$xpl->write(Msg->new(hex => 'F020', desc => 'version check'));
$xpl->write(Msg->new(hex => "F02A",
                     desc => 'enable all possible receiving modes'));
$xpl->write(Msg->new(hex => 'F041', desc => 'variable length with visonic'));

# Run the main loop
$xpl->main_loop();

=head2 C<device_reader()>

This is the callback that processes output from the RFXCOM.  It is
responsible for sending out the sensor.basic xpl-trig messages.

=cut

sub device_reader {
  my ($xpl, $buf, $last) = @_;
  my $res = $rf->process_variable_length($buf);
  if (defined $res) {
    # truncate buffer by given length
    my $m = substr($buf, 0, $res->{length}, '') if ($res->{length});
    print "Processed: ", unpack("H*", $m), "\n"
      if ($xpl->verbose && $m && !$res->{duplicate});
    return 1 unless ($res->{messages} && ref($res->{messages}));
    foreach my $msg (@{$res->{messages}}) {
      print $msg->summary,"\n";
      $xpl->send($msg);
    }
  } else {
    # discard buffer
    print "Not a variable length message: ", hex_dump($buf), "\n";
    $buf = '';
  }
  return $buf;
}

# send a 'hbeat.end' message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 BUGS

Not all devices supported by an RFXCOM receiver are currently
supported.  Support can usually be added quite easily if example data
can be provided - such as the output of the sample RFreceiver.exe.

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

RFXCOM website: http://www.rfxcom.com/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2007, 2008 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
