#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-packet-trace - Perl script for decoding xPL messages from IP packets

=head1 SYNOPSIS

  # live decode
  # decode xPL packets that are visible on the interface eth0
  xpl-packet-trace eth0

  # batch decode
  # sniff 100 xPL packets from eth0 and write them to xpl.tcp
  # then later decode xPL messages from tcpdump file
  tcpdump -w xpl.tcp -i eth0 -c 100 -s 2048 udp and port 3865
  xpl-packet-trace xpl.tcp

=head1 DESCRIPTION

This script is an xPL message decoder for IP packets.  Packets can be
decoded live by sniffing traffic on a network interface or they can be
batched processed by reading them from a tcpdump file.

=cut

use strict;
use Net::Pcap;
use Socket qw/inet_ntoa/;
use xPL::Message;
use Time::HiRes;

my $err = "";
my $dev = shift || die "@ARGV\n" ||Net::Pcap::lookupdev(\$err);
$err and die 'lookupdev: '.$err;
my $snaplen = 2048;
my $promisc = 1;
my $timeout = 100;
my $glob = {};
$glob->{t} = Time::HiRes::time;

my $pcap;
if ($dev =~ /\.tcp$/) {
  # seems to be a file
  # assume the filter was provide to the tcpdump command
  $pcap = Net::Pcap::open_offline($dev, \$err);
  $err and die 'Net::Pcap::open_offline failed: '.$err;
} else {
  # seems to be a device
  my $net;
  my $mask;
  Net::Pcap::lookupnet($dev, \$net, \$mask, \$err);
  $err and die 'Net::Pcap::lookupnet failed: '.$err;

  $pcap = Net::Pcap::open_live($dev, $snaplen, $promisc, $timeout, \$err);
  $err and die 'Net::Pcap::open_offline failed: '.$err;

  my $filter;
  Net::Pcap::compile($pcap, \$filter, 'udp and port 3865', 1, $mask);
  $err and die 'Net::Pcap::compile failed: '.$err;

  Net::Pcap::setfilter($pcap, $filter);
}
print STDERR "Processing $dev\n";

Net::Pcap::loop($pcap, -1, \&packet, "");
Net::Pcap::close($pcap);
printf STDERR
  "Elapsed processing time: %.02f\n", Time::HiRes::time - $glob->{t};

END {
  print STDERR "Trace contained ".$glob->{count}." packets\n";
  foreach (qw/xpl-cmnd xpl-stat xpl-trig/) {
    printf STDERR "%s %d\n", $_, $glob->{$_};
  }
}

sub packet {
  my $user = shift;
  my $hdr = shift;
  my $pkt = shift;

  $glob->{start} = $hdr->{tv_sec}+$hdr->{tv_usec}/1000000
    unless (exists $glob->{start});
  $glob->{end} = ($hdr->{tv_sec}+$hdr->{tv_usec}/1000000);
  my $time = $glob->{end} - $glob->{start};
  $glob->{count}++;
0 and  printf(STDERR
         "Packet: %4d len=%-4d t=%-6.4f\n", $glob->{count}, $hdr->{len}, $time);

  my ($mac_dst, $mac_src, $type, $ip) = unpack("a6 a6 n a*",$pkt);

  if ($type != 0x0800) {
    warn " not IP protocol\n";
    return;
  }

  my $byte = unpack 'C', $ip;
  my $ip_ver = ($byte&0xf0) >> 4;
  my $ip_len = ($byte&0xf) << 2;
  if ($ip_ver != 4) {
    warn " not IPv4\n";
    return;
  }

  my ($ip_hdr,$udp) = unpack("a$ip_len a*",$ip);
  my ($proto,$src,$dst) = unpack("x9 C x2 a4 a4",$ip_hdr);
  unless ($proto == 17) {
    warn " not UDP\n";
    return;
  }

  my ($srcp, $dstp, $payload) = unpack("n n x4 a*",$udp);

  0 and printf(STDERR
         "UDP: src=%s:%d dst=%s:%d len=%d\n",
         inet_ntoa($src), $srcp,
         inet_ntoa($dst), $dstp,
         length($payload));

  # filter should have been applied but just in case
  unless ($srcp == 3865 || $dstp == 3865) {
    warn " not xPL\n";
    return;
  }
  my $xpl = xPL::Message->new_from_payload($payload);
  print STDERR $xpl->summary,"\n";
  print $xpl->string,"\n";
  $glob->{$xpl->message_type}++;
}

=head1 SEE ALSO

xPL::Message(3), Net::Pcap(3), tcpdump(8)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2007 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut



