#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-x10 - Perl script for an xPL X10 application

=head1 SYNOPSIS

  # show usage message
  xpl-x10 -h

  # start the x10 application on first ethernet interface in verbose mode
  xpl-x10 -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that interfaces with an X10 controller.
At the moment, this script uses heyu (version 2) to communicate with
the controller.

=cut

use strict;
use warnings;
use English qw/-no_match_vars/;
use FileHandle;
use Getopt::Std;
use xPL::Client;
$|=1; # autoflush helps debugging

sub HELP_MESSAGE {
  my $msg = shift || q{};
  die
qq{Usage: $0 [flags] [options]
where valid flags are:
  -h - show this help text
  -v - verbose mode
and valid options are (default shown in brackets):
  -i if0 - the inferface for xPL messages (first non-loopback or loopback)
$msg
};
}

my %opt = ();
getopts('hvi:b:', \%opt);
if (exists $opt{'h'}) {
  HELP_MESSAGE()
}

my %args =
  (
   vendor_id => "bnz",
   device_id => "x10heyu",
  );
if (exists $opt{'i'}) {
  $args{interface} = $opt{'i'};
}
if (exists $opt{'v'}) {
  $args{verbose} = $opt{'v'};
}

# Create an xPL Client object
my $xpl = xPL::Client->new(%args) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'x10', callback => \&xpl_in);

my $buf = q{};
my %unit = ();

my $fh = new FileHandle;
$fh->open('heyu monitor|') || die "heyu: $ERRNO\n";
$xpl->add_input(handle => $fh, callback => \&heyu_reader);

# Run the main loop
$xpl->main_loop();


=head2 C<xpl_in(%xpl_callback_parameters)>

This is the callback that processes incoming xPL messages.  It handles
a limited subset of the full x10.basic schema but could easily be
extended.

=cut

sub xpl_in {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  if ($msg->message_type ne 'xpl-cmnd' ||
      $msg->class ne 'x10' ||
      $msg->class_type ne 'basic') {
    return 1;
  }
  my $heyu_command = xpl_to_heyu($msg->command);
  return 1 unless ($heyu_command);

  my @devices;
  my $data1;
  my $data2;
  if ($msg->device) {
    push @devices, split /,/, $msg->device;
  }
  if ($msg->house) {
    push @devices, map { $_.'1' } split //, $msg->house;
  }
  my @args = ();
  if ($heyu_command =~ /^bright|dim$/ && $msg->level) {
    push @args, int $msg->level*22/100;
  }
  if ($heyu_command eq 'xfunc') {
    $data1 = $msg->data1;
    $data2 = $msg->data2;
    return 1 unless (defined $data1 && defined $data2);
    $data1 = sprintf '%02x', $data1;
    $data2 = sprintf '%02x', $data2;
    foreach my $device (@devices) {
      if ($opt{'v'}) {
        print STDERR "Executing 'heyu $heyu_command $data1 $device $data2'\n";
      }
      system('heyu', $heyu_command, $data1, $device, $data2) == 0 or next;
      my %args = (
                  message_type => 'xpl-trig',
                  class => 'x10.confirm',
                  body => { command => $msg->command, device => $device,
                            data1 => $msg->data1, data2 => $msg->data2 },
                 );
      $xpl->send(%args);
    }
    return 1;
  }

  foreach my $device (@devices) {
    if ($opt{'v'}) {
      print STDERR "Executing 'heyu $heyu_command $device".
        (@args ? " @args" : "")."'\n";
    }
    system('heyu', $heyu_command, $device, @args) == 0 or next;
    send_xpl_confirm($device, $msg->command, @args);
  }
  return 1;
};

=head2 C<heyu_reader()>

This is the callback that processes output from the "heyu monitor"
command.  It is responsible for sending out x10.basic xpl-trig
messages.

=cut

sub heyu_reader {
  my $bytes = $fh->sysread($buf, 512, length($buf));
  while ($buf =~ s/^(.*?)\n//) {
    $_ = $LAST_PAREN_MATCH;
    next if (/sndc/); # ignore what we send to avoid loops
    # TOFIX: process timestamps
    if (m!function\s+(\S+)\s+:\s+housecode\s+(\w+)(.*\s+by\s+%(\d+))?!) {
      my $f = lc($1);
      my $h = $2;
      my $level = $4;
      my $u = $unit{$h} || 'X';
      my $xpl_command = heyu_to_xpl($f);
      next unless ($xpl_command);
      send_xpl($h.$u, $xpl_command, $level);
    } elsif (m!address\s+unit\s+(\S+)\s+:\s+housecode\s+(\w+)!) {
      $unit{$2} = $1;
    }
  }
  return 1;
}

=head2 C<send_xpl( $device, $command, [ $level ] )>

This functions is used to send out x10.basic xpl-trig messages as a
result of messages from "heyu monitor".

=cut

sub send_xpl {
  return send_xpl_aux('x10.basic', @_);
}

=head2 C<send_xpl_confirm( $device, $command, [ $level ] )>

This functions is used to send out x10.confirm xpl-trig messages in
response to incoming xpl-cmnd messages.

=cut

sub send_xpl_confirm {
  return send_xpl_aux('x10.confirm', @_);
}

=head2 C<send_xpl_aux( $message_type, $device, $command, [ $level ] )>

This functions is used by the other two send functions to construct the
parameters to send the actual xPL message.

=cut

sub send_xpl_aux {
  my $class = shift;
  my $device = shift;
  my $command = shift;
  my $level = shift;
  my %args =
    (
     message_type => 'xpl-trig',
     class => $class,
     body => { command => $command, device => $device },
    );
  if ($level) {
    # convert level from 0-22 range for heyu to 0-100 range for xPL
    $args{body}->{level} = int $level*100/22;
  }
  if ($opt{'v'}) {
    print STDERR
      "Sending $class $device $command", ($level ? " ".$level : ""), "\n";
  }

  $xpl->send(%args);
}

# data1=0x31 data2=0x00-0x3f - dim on/off to specific level
# data2 & 0x40 = at 30 second rate
#       & 0x80 = at 1 minute rate
#       & 0xc0 = at 5 minute rate
sub xpl_to_heyu {
  my $command = shift;
  return {
          all_units_off => "alloff", all_units_on => "allon",
          all_lights_off => "lightsoff",  all_lights_on => "lightson",
          on => "on", off => "off",
          dim => "dim", bright => "bright",
          extended => "xfunc",
         }->{$command};
}

sub heyu_to_xpl {
  my $command = shift;
  return {
          alloff => "all_units_off", allon => "all_units_on",
          lightsoff=> "all_lights_off",  lightson => "all_lights_on",
          on => "on", off => "off",
          dim => "dim", bright => "bright",
         }->{$command};
}

# send a 'hbeat.end' message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), heyu(1)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2005, 2006 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
