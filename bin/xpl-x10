#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-x10 - Perl script for an xPL X10 application

=head1 SYNOPSIS

  xpl-x10 [flags] [options]
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0 - the interface for xPL messages (first non-loopback or loopback)

  # start the x10 application on first ethernet interface in verbose mode
  xpl-x10 -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that interfaces with an X10 controller.
At the moment, this script uses heyu (version 2) to communicate with
the controller.

=cut

use strict;
use warnings;
use English qw/-no_match_vars/;
use FileHandle;
use IO::Pipe;
use POSIX ":sys_wait_h";
use Getopt::Long;
use Pod::Usage;
use xPL::Client;
use xPL::Queue;
$|=1; # autoflush helps debugging
my $path = ($0=~m!^(.*/)!) ? $1 : '';

my %args = ( vendor_id => 'bnz', device_id => 'x10heyu', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);

$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'x10', callback => \&xpl_in,
                       filter => {
                                  message_type => 'xpl-cmnd',
                                  class => 'x10',
                                  class_type => 'basic',
                                 });

my $buf = q{};
my $helperbuf = q{};
my $helperseq = 0;
my $waiting;
my $queue = xPL::Queue->new();
my %unit = ();

my $fh = new FileHandle;
$fh->open('heyu monitor|') || die "heyu: $ERRNO\n";
$xpl->add_input(handle => $fh, callback => \&heyu_monitor);

my $rh = IO::Pipe->new;
my $wh = IO::Pipe->new;
my $pid = fork;
if ($pid) {

  sub sig {
    waitpid(-1,WNOHANG);
    die "Caught signal\n";
  }
  $SIG{CHLD} = \&sig;
  $SIG{PIPE} = \&sig;

  # parent
  $rh->reader();
  $wh->writer();
  $wh->autoflush(1);
  $xpl->add_input(handle => $rh, callback => \&heyu_helper_read);
} elsif (defined $pid) {
  # child
  $rh->writer();
  $rh->autoflush(1);
  $wh->reader();
  my $wfd = $rh->fileno;
  my $rfd = $wh->fileno;
  open(STDIN,"<&$rfd") or die "dup of stdin failed: $!";
  open(STDOUT,">&=$wfd") or die "dup of stdout failed: $!";
  open(STDERR,"+>&$wfd") or die "dup of stderr failed: $!";
  exec($path.'xpl-heyu-helper',  @ARGV) or
    die "Failed to exec ${path}xpl-heyu-helper: $!\n";
} else {
  die "Fork failed: $!\n";
}

# Run the main loop
$xpl->main_loop();

=head2 C<xpl_in(%xpl_callback_parameters)>

This is the callback that processes incoming xPL messages.  It handles
a limited subset of the full x10.basic schema but could easily be
extended.

=cut

sub xpl_in {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  my $heyu_command = command_xpl_to_heyu($msg->command);
  return 1 unless ($heyu_command);

  my @devices;
  my $data1;
  my $data2;
  if ($msg->device) {
    device_xpl_to_heyu($msg->device, \@devices);
  }
  if ($msg->house) {
    house_xpl_to_heyu($msg->house, \@devices);
  }
  my @args = ();
  if ($heyu_command =~ /^bright|dim$/ && $msg->level) {
    push @args, level_xpl_to_heyu($msg->level);
  }
  if ($heyu_command eq 'xfunc') {
    $data1 = $msg->data1;
    $data2 = $msg->data2;
    return 1 unless (defined $data1 && defined $data2);
    $data1 = sprintf '%02x', $data1;
    $data2 = sprintf '%02x', $data2;
    foreach my $device (@devices) {
      heyu_helper_queue($heyu_command, $data1, $device, $data2);
      my %args = (
                  message_type => 'xpl-trig',
                  class => 'x10.confirm',
                  body => { command => $msg->command,
                            device => device_heyu_to_xpl($device),
                            data1 => $msg->data1, data2 => $msg->data2 },
                 );
      $xpl->send(%args);
    }
    return 1;
  }

  foreach my $device (@devices) {
    heyu_helper_queue($heyu_command, $device, @args);
    send_xpl_confirm(device_heyu_to_xpl($device), $msg->command, @args);
  }
  return 1;
}

=head2 C<heyu_monitor()>

This is the callback that processes output from the "heyu monitor"
command.  It is responsible for sending out x10.basic xpl-trig
messages.

=cut

sub heyu_monitor {
  my $bytes = $fh->sysread($buf, 512, length($buf));
  while ($buf =~ s/^(.*?)\n//) {
    $_ = $LAST_PAREN_MATCH;
    next if (/sndc/); # ignore what we send to avoid loops
    # TOFIX: process timestamps
    if (m!function\s+(\S+)\s+:\s+housecode\s+(\w+)(.*\s+by\s+%(\d+))?!) {
      my $f = lc($1);
      my $h = lc($2);
      my $level = $4;
      my $u = $unit{$h} || 'X';
      my $xpl_command = command_heyu_to_xpl($f);
      next unless ($xpl_command);
      send_xpl($h.$u, $xpl_command, $level);
    } elsif (m!address\s+unit\s+(\S+)\s+:\s+housecode\s+(\w+)!) {
      $unit{lc($2)} = $1;
    }
  }
  return 1;
}


=head2 C<heyu_helper_read()>

This is the callback that processes output from the "heyu helper"
command.  It is responsible for reading the results of heyu commands.

=cut

sub heyu_helper_read {
  my $bytes = $rh->sysread($helperbuf, 512, length($helperbuf));
  while ($helperbuf =~ s/^(.*?)\n//) {
    $_ = $LAST_PAREN_MATCH;
    my ($recvseq, $rc, $err) = split /\000/, $_, 3;
    unless ($recvseq =~ /^[0-9a-f]{8}$/) {
      print STDERR "Helper wrote: $_\n";
      next;
    }
    if ($recvseq eq $waiting && $rc == 0) {
      print STDERR "Acknowledged $waiting\n";
    } else {
      print STDERR "Received $recvseq: $rc ", $err||"", "\n";
    }
    undef $waiting;
    heyu_helper_write();
  }
  return 1;
}

=head2 C<heyu_helper_queue()>

This method is used to queue commands to the heyu helper.

=cut

sub heyu_helper_queue {
  my $seq_str = sprintf "%08x", $helperseq++;
  my $msg = join chr(0), $seq_str, @_;
  $msg .= "\n";
  $queue->enqueue([$seq_str, $msg]);
  $msg =~ s/\0/ /g;
  print STDERR "queued: $msg" if ($verbose);
  return heyu_helper_write() if (!defined $waiting);
  return $seq_str;
}

=head2 C<heyu_helper_write()>

This method is used to send commands to the heyu helper.

=cut

sub heyu_helper_write {
  my $item = $queue->dequeue;
  return unless (defined $item);
  my ($seq_str, $msg) = @$item;
  $wh->syswrite($msg);
  $msg =~ s/\0/ /g;
  print STDERR "sent: $msg" if ($verbose);
  $waiting = $seq_str;
  return $seq_str;
}

=head2 C<send_xpl( $device, $command, [ $level ] )>

This functions is used to send out x10.basic xpl-trig messages as a
result of messages from "heyu monitor".

=cut

sub send_xpl {
  return send_xpl_aux('x10.basic', @_);
}

=head2 C<send_xpl_confirm( $device, $command, [ $level ] )>

This functions is used to send out x10.confirm xpl-trig messages in
response to incoming xpl-cmnd messages.

=cut

sub send_xpl_confirm {
  return send_xpl_aux('x10.confirm', @_);
}

=head2 C<send_xpl_aux( $message_type, $device, $command, [ $level ] )>

This functions is used by the other two send functions to construct the
parameters to send the actual xPL message.

=cut

sub send_xpl_aux {
  my $class = shift;
  my $device = shift;
  my $command = shift;
  my $level = shift;
  my %args =
    (
     message_type => 'xpl-trig',
     class => $class,
     body => { command => $command, device => $device },
    );
  if ($level) {
    $args{body}->{level} = level_heyu_to_xpl($level);
  }
  if ($verbose) {
    print STDERR
      "Sending $class $device $command", ($level ? " ".$level : ""), "\n";
  }

  $xpl->send(%args);
}

# convert level from 0-100 range for xPL to 0-22 range for heyu
sub level_xpl_to_heyu {
  int $_[0]*22/100
}

# convert level from 0-22 range for heyu to 0-100 range for xPL
sub level_heyu_to_xpl {
  int $_[0]*100/22
}

sub house_xpl_to_heyu {
  my $house = shift;
  my $result = shift;
  foreach (split//,$house) {
    push @{$result},$_.'1';
  }
  return $result;
}

sub device_xpl_to_heyu {
  my $device = shift;
  my $result = shift;
  my %h = ();
  foreach (split/,/, $device) {
    my ($h,$u) = split//,$_, 2;
    push@{$h{$h}},$u;
  }
  foreach (keys %h) {
    push @$result, $_.(join",",sort { $a <=> $b } @{$h{$_}})
  }
  return $result;
}

sub device_heyu_to_xpl {
  my $dev = shift;
  my $house = substr($dev,0,1,q{});
  return $house.(join ",".$house, split/,/,$dev);
}

# data1=0x31 data2=0x00-0x3f - dim on/off to specific level
# data2 & 0x40 = at 30 second rate
#       & 0x80 = at 1 minute rate
#       & 0xc0 = at 5 minute rate
sub command_xpl_to_heyu {
  my $command = shift;
  return {
          all_units_off => "alloff", all_units_on => "allon",
          all_lights_off => "lightsoff",  all_lights_on => "lightson",
          on => "on", off => "off",
          dim => "dim", bright => "bright",
          extended => "xfunc",
         }->{$command};
}

sub command_heyu_to_xpl {
  my $command = shift;
  return {
          alloff => "all_units_off", allon => "all_units_on",
          lightsoff=> "all_lights_off",  lightson => "all_lights_on",
          on => "on", off => "off",
          dim => "dim", bright => "bright",
         }->{$command};
}

# send a 'hbeat.end' message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), heyu(1)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2005, 2007 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
