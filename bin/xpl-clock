#!/usr/bin/perl -w

=head1 NAME

xpl-clock - Perl script for an example xPL clock application

=head1 SYNOPSIS

  xpl-clock [flags] [options]
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0 - the interface for xPL messages (first non-loopback or loopback)
    -s nn  - number of seconds the xPL clock should wait between messages (10)

  # start the clock application with "tick" interval of 60 seconds
  xpl-clock -s 60

  # start the clock listening and broadcasting on first ethernet
  # interface in verbose mode using the default "tick" interval of 10
  # seconds
  xpl-clock -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that periodically sends out
"clock.update" messages.  There doesn't seem to be an official
schema for these messages but this example client was created
to use, with the L<xpl-logger>, for testing purposes.

=cut

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use POSIX qw/strftime/;
use xPL::Client;
$|=1; # autoflush helps debugging

my %args = ( vendor_id => 'bnz', device_id => 'clock', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
my $tick_interval = 10;
my $time_format = '%Y%m%d%H%M%S';
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
           's|tick_interval=i' => \$tick_interval,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);

$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";

# Add a timer to the xPL Client event loop to generate the
# "clock.update" messages.  The negative interval causes the timer to
# trigger immediately rather than waiting for the first interval.
$xpl->add_timer(id => 'tick',
                timeout => -$tick_interval,
                callback => \&tick,
                arguments => [$xpl]);

$SIG{TERM} = \&end;
$SIG{QUIT} = \&end;

# Run the main loop
$xpl->main_loop();

# The callback to send the "clock.update" messages
sub tick {
  my %p = @_;
  my $xpl = $p{arguments}->[0];
  $xpl->send(message_type => 'xpl-stat', class => 'clock.update',
             body => { 'time' => strftime($time_format, (localtime time)) });
  return 1;
};

# send a "hbeat.end" message on exit
sub end { defined $xpl && undef $xpl;exit; }#->send_hbeat_end(); exit; }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), strftime(3)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2005, 2009 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
