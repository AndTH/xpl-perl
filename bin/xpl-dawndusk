#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-dawndusk - Perl script for an xPL dawndusk application

=head1 SYNOPSIS

  xpl-dawndusk [flags] [options] latitude longitude
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0 - the interface for xPL messages (first non-loopback or loopback)

  # start the dawndusk application listening and broadcasting on first
  # ethernet interface in verbose mode
  xpl-dawndusk -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that implements the dawn/dusk schema.
Currently, it only implements sending of dawn and dusk 'xpl-trig'
messages.  Support for 'dawndusk.request' message for 'daynight'
will be implemented shortly.

This script requires the DateTime::Event::Sunrise perl module.

=cut

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use xPL::Client;
$|=1; # autoflush helps debugging

my %args = ( vendor_id => 'bnz', device_id => 'dawndusk', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);
$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

my $latitude = shift  || 51;
my $longitude = shift || -1;
my $state = "day";

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";

# set up each new day at midnight
$xpl->add_timer(id => 'dawn',
                timeout => "sunrise latitude=$latitude longitude=$longitude",
                callback => sub { dawn(); 1; });

$xpl->add_timer(id => 'dusk',
                timeout => "sunset latitude=$latitude longitude=$longitude",
                callback => sub { dusk(); 1; });

$state = $xpl->timer_next('dusk') < $xpl->timer_next('dawn') ? "day" : "night";

$xpl->add_xpl_callback(id => 'query_handler',
                       filter =>
                       {
                        message_type => 'xpl-cmnd',
                        class => 'dawndusk',
                        class_type => 'request',
                       },
                       callback => \&query_handler);
# Run the main loop
$xpl->main_loop();

exit;

sub send_dawndusk {
  my $status = shift;
  return $xpl->send(message_type => 'xpl-trig',
                    class => 'dawndusk.basic',
                    body => { type => 'dawndusk', status => $status },
                   );
}

sub dawn {
  $state = "day";
  print "Dawn\n" if ($verbose);
  send_dawndusk('dawn');
  return 1;
}

sub dusk {
  $state = "night";
  print "Dusk\n" if ($verbose);
  send_dawndusk('dusk');
  return 1;
}

sub query_handler {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  return $xpl->send(message_type => 'xpl-stat',
                    class => 'dawndusk.basic',
                    body => { type => 'daynight', status => $state },
                   );
}

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3), DateTime::Event::Sunrise(3)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2005, 2007 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
