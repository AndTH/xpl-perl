#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-digitemp - Perl script for an xPL interface to the DigiTemp 1-wire software

=head1 SYNOPSIS

  xpl-digitemp [flags] [options]
  where valid flags are:
    -h - show this help text
    -v - verbose mode
  and valid options are (default shown in brackets):
    -i if0  - the interface for xPL messages (first non-loopback or loopback)

  # start the digitemp client on first ethernet interface in verbose mode
  xpl-digitemp -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that interfaces with the DigiTemp 1-wire
software from;

  http://www.digitemp.com/

B<This script is deprecated and will not be in the next release.
L<xpl-owfs> should be used instead.>

=cut

use strict;
use warnings;
use English qw/-no_match_vars/;
use DirHandle;
use FileHandle;
use Getopt::Long;
use Pod::Usage;
use xPL::Client;
$|=1; # autoflush helps debugging

my %args = ( vendor_id => 'bnz', device_id => 'digitemp', );
my %opt = ();
my $verbose;
my $interface;
my $help;
my $man;
GetOptions('verbose+' => \$verbose,
           'interface=s' => \$interface,
           'define=s' => \%opt,
           'help|?|h' => \$help,
           'man' => \$man,
          ) or pod2usage(2);
pod2usage(1) if ($help);
pod2usage(-exitstatus => 0, -verbose => 2) if ($man);
$args{'interface'} = $interface if ($interface);
$args{'verbose'} = $verbose if ($verbose);

my %uid = ();
my $fh = FileHandle->new("digitemprc");
while (<$fh>) {
  next unless (/ROM (\d+) (0x.. 0x.. 0x.. 0x.. 0x.. 0x.. 0x..) 0x../);
  my $i = $1;
  my $uid = $2; $uid =~ s/0x//g; $uid =~ s/ //g; $uid =~ s/^(..)/$1./;
  $uid{$i} = $uid;
}
$fh->close;

# Create an xPL Client object
my $xpl = xPL::Client->new(%args, %opt) or die "Failed to create xPL::Client\n";

my %state;
my $buf = "";
my $pid;

END {
  # kill child process
  kill(9, $pid) if ($pid);

  # send a 'hbeat.end' message on exit
  $xpl->send_hbeat_end() if (defined $xpl);
}

$fh = FileHandle->new;
$pid = $fh->open("digitemp_DS2490 -c digitemprc -q -o1 -a -n 0 -d 120|") ||
  die "digitemp: $!\n";

$xpl->add_input(handle => $fh, callback => \&digitemp_reader);

# Run the main loop
$xpl->main_loop();

=head2 C<digitemp_reader()>

This is the callback that processes output from DigiTemp.  It is
responsible for sending out the sensor.basic xpl-trig messages.

=cut

sub digitemp_reader {
  my $bytes = $fh->sysread($buf, 512, length($buf));
  while ($buf =~ s/^(.*?)\n//) {
    $_ = $1;
    print $_, "\n" if ($verbose);
    # TOFIX: process timestamps
    if (m!Sensor\s+(\d+)\s+C:\s+(\S+)\s+!) {
      process_sensor_value($1, 'temp', $2);
    }
    if (m!Sensor\s+(\d+)\s+C:\s+\S+\s+F:\s+\S+\s+H:\s+(\S+)%!) {
      process_sensor_value($1, 'humidity', $2);
    }
    if (m!Sensor\s+(\d+)\s+#(\d+)\s+(\d+)!) {
      process_sensor_value($1, 'count', $3, $2);
    }
  }
  return 1;
}

=head2 C<process_sensor_value( $sensor, $key, $value, $index)>

This method is a helper for some common logic for sending values
from sensors.

=cut

sub process_sensor_value {
  my $sensor = shift;
  my $key = shift;
  my $value = shift;
  my $index = shift;
  my $uid = $uid{$sensor};
  my $old = $state{$uid}->{$key};
  my $message_type =
    (defined $old && $value eq $old) ? "xpl-stat" : "xpl-trig";
  $state{$uid}->{$key} = $value;
  return send_xpl($message_type,
                  defined $index ? $uid.'.'.$index : $uid,
                  $key, $value);
}

=head2 C<send_xpl( $message_type, $device, $type, $current )>

This functions is used to send out sensor.basic xPL messages with
the state of one-wire sensors.

=cut

sub send_xpl {
  my $message_type = shift;
  my $device = shift;
  my $type = shift;
  my $current = shift;
  my $class = 'sensor.basic';
  my %args =
    (
     message_type => $message_type,
     class => $class,
     body => { device => $device, type => $type, current => $current },
    );
  print STDERR "Sending $device\[$type]=$current\n" if ($verbose);
  return $xpl->send(%args);
}

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

DigiTemp website: http://www.digitemp.com/

=head1 AUTHOR

Mark Hindess, E<lt>soft-xpl-perl@temporalanomaly.comE<gt>

=head1 COPYRIGHT

Copyright (C) 2006, 2008 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
