#!/usr/bin/perl -w

# $Id: xpl-digitemp 91 2006-01-14 08:57:45Z beanz $

=head1 NAME

xpl-digitemp - Perl script for an xPL interface to the DigiTemp 1-wire software

=head1 SYNOPSIS

  # show usage message
  xpl-digitemp -h

  # start the digitemp client on first ethernet interface in verbose mode
  xpl-digitemp -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that interfaces with the DigiTemp 1-wire
software from;

  http://www.digitemp.com/

=cut

use strict;
use warnings;
use English qw/-no_match_vars/;
use DirHandle;
use FileHandle;
use Getopt::Std;
use xPL::Client;
$|=1; # autoflush helps debugging

sub HELP_MESSAGE {
  my $msg = shift || q{};
  die
qq{Usage: $0 [flags] [options]
where valid flags are:
  -h - show this help text
  -v - verbose mode
and valid options are (default shown in brackets):
  -i if0  - the inferface for xPL messages (first non-loopback or loopback)
$msg
};
}

my %opt = ();
getopts('hvi:', \%opt);
if (exists $opt{'h'}) {
  HELP_MESSAGE()
}
my $verbose = exists $opt{'v'};

my %uid = ();
my $fh = FileHandle->new("digitemprc");
while (<$fh>) {
  next unless (/ROM (\d+) (0x.. 0x.. 0x.. 0x.. 0x.. 0x.. 0x..) 0x../);
  my $i = $1;
  my $uid = $2; $uid =~ s/0x//g; $uid =~ s/ //g; $uid =~ s/^(..)/$1./;
  $uid{$i} = $uid;
}
$fh->close;

my %args =
  (
   vendor_id => "bnz",
   device_id => "digitemp",
  );
if (exists $opt{'i'}) {
  $args{interface} = $opt{'i'};
}
if (exists $opt{'v'}) {
  $args{verbose} = $opt{'v'};
}

# Create an xPL Client object
my $xpl = xPL::Client->new(%args) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'digitemp', callback => \&xpl_in);

my %state;
my $buf = "";
my $pid;

END {
  # kill child process
  kill(9, $pid) if ($pid);

  # send a 'hbeat.end' message on exit
  $xpl->send_hbeat_end() if (defined $xpl);
}

$fh = FileHandle->new;
$pid = $fh->open("digitemp_DS2490 -c digitemprc -q -o1 -a -n 0 -d 120|") ||
  die "digitemp: $!\n";

$xpl->add_input(handle => $fh, callback => \&digitemp_reader);


# Run the main loop
$xpl->main_loop();

=head2 C<xpl_in(%xpl_callback_parameters)>

This is the callback that processes incoming xPL messages.  It handles
the incoming control.basic schema messages.

=cut

sub xpl_in {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  if ($msg->message_type ne 'xpl-cmnd' ||
      $msg->class ne 'control' ||
      $msg->class_type ne 'basic') {
    return 1;
  }

  return 1 unless ($msg->type eq "output");
  if ($msg->device =~ /debug/) { # hack to aid debug
    # don't have any debug actions yet
    return 1;
  }
  return 1;
}

=head2 C<digitemp_reader()>

This is the callback that processes output from DigiTemp.  It is
responsible for sending out the sensor.basic xpl-trig messages.

=cut

sub digitemp_reader {
  my $bytes = $fh->sysread($buf, 512, length($buf));
  while ($buf =~ s/^(.*?)\n//) {
    $_ = $1;
    # TOFIX: process timestamps
    if (m!Sensor\s+(\d+)\s+C:\s+(\S+)\s+!) {
      my $sensor = $1;
      my $value = $2;
      my $uid = $uid{$sensor};
      my $old = $state{$uid};
      my $message_type =
        (defined $old && $value eq $old) ? "xpl-stat" : "xpl-trig";
      $state{$uid} = $value;
      send_xpl($message_type, $uid, "temp", $value);
    }
    print if ($verbose);
  }
  return 1;
}

=head2 C<send_xpl( $message_type, $device, $type, $current )>

This functions is used to send out sensor.basic xPL messages with
the state of one-wire sensors.

=cut

sub send_xpl {
  my $message_type = shift;
  my $device = shift;
  my $type = shift;
  my $current = shift;
  my %args =
    (
     message_type => $message_type,
     class => 'sensor.basic',
     body => { device => $device, type => 'temp', current => $current },
    );
  print STDERR "Sending $device\[$type]=$current\n" if ($verbose);
  return $xpl->send(%args);
}

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

DigiTemp website: http://www.digitemp.com/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2005,2006 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
