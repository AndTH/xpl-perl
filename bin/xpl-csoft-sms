#!/usr/bin/perl -w

# $Id: xpl-csoft-sms 151 2006-05-27 10:53:39Z beanz $

=head1 NAME

xpl-csoft-sms - Perl script for an xPL X OSD application

=head1 SYNOPSIS

  # show usage message
  xpl-csoft-sms -h

  # start the csoft-sms on first ethernet interface in verbose mode
  xpl-csoft-sms -i eth0 -v

=head1 DESCRIPTION

This script is an xPL client that sends messages via the Connection
Software (http://www.csoft.co.uk/) SMS service.  This script requires
the LWP modules and one of the SSL implementations.

=cut

use strict;
use warnings;
use Getopt::Std;
use xPL::Client;
use LWP::UserAgent;
use HTTP::Request::Common qw(POST);

$|=1; # autoflush helps debugging

my $URL = 'https://www.csoft.co.uk/sendsms';

sub HELP_MESSAGE {
  my $msg = shift || q{};
  die
qq{Usage: $0 [flags] [options]
where valid flags are:
  -h - show this help text
and valid options are (default shown in brackets):
  -i if0  - the inferface for xPL messages (first non-loopback or loopback)
  -u name - your csoft username
  -p pin  - your csoft pin
$msg
};
}

my %opt = ();
getopts('hvi:u:p:', \%opt);
if (exists $opt{'h'}) { HELP_MESSAGE() }
my $username =
  exists $opt{'u'} ? $opt{'u'} : HELP_MESSAGE("Username is required");
my $pin =
  exists $opt{'p'} ? $opt{'p'} : HELP_MESSAGE("PIN is required");

my %args =
  (
   vendor_id => "bnz",
   device_id => "csoftsms",
  );
if (exists $opt{'i'}) {
  $args{interface} = $opt{'i'};
}
if (exists $opt{'v'}) {
  $args{verbose} = $opt{'v'};
}

my $ua = LWP::UserAgent->new();

# Create an xPL Client object
my $xpl = xPL::Client->new(%args) or die "Failed to create xPL::Client\n";

# Add a callback to receive all incoming xPL messages
$xpl->add_xpl_callback(id => 'xpl', callback => \&xpl,
                       filter => {
                                  message_type => 'xpl-cmnd',
                                  class => 'sendmsg',
                                  class_type => 'basic',
                                 });

# Run the main loop
$xpl->main_loop();

sub xpl {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  unless ($msg->body) {
    return send_conf("error", "null body");
  }
  print $msg->summary,"\n";

  if ($msg->to =~ /(\D)/) {
    return send_conf("error", "non-numeric character, '$1', in 'to' field");
  }

  my $response =
    $ua->post($URL,
              {
               Username => $username,
               PIN => $pin,
               Message => $msg->body,
               SendTo => $msg->to,
              });
  unless ($response->is_success) {
    my $s = $response->as_string;
    print "Failed:\n",$s,"\n";
    return send_conf("attempted", $response->status_line);
  }

  my $s = $response->as_string;
  print "HTTP OK:\n",$s,"\n";
  $s =~ s/\r?\n$//;
  $s =~ s/^.*\r?\n//s;
  unless ($s =~ /Message Sent OK/i) {
    return send_conf($s);
  }
  print "Sent ok: $s\n";
  return send_conf("success");
}

sub send_conf {
  my $status = shift;
  my $error = shift;
  my %body = ( status => $status );
  $body{error} = $error if ($error);
  return $xpl->send(class => 'sendmsg.confirm', body => \%body);
}

# send a "hbeat.end" message on exit
END { defined $xpl && $xpl->send_hbeat_end(); }

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

Connection Software Website: http://www.csoft.co.uk/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2007 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
