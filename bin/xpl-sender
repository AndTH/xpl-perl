#!/usr/bin/perl -w

# $Id$

=head1 NAME

xpl-sender - Perl script for an xPL message sender application

=head1 SYNOPSIS

  # show usage message
  xpl-sender -h

  # start the send listening and broadcasting on the loopback interface
  xpl-sender -i eth0 -c osd.basic command=clear text=Boo

  # something to go in /etc/apcupsd/mainsback perhaps:
  xpl-sender -i eth0 -m xpl-trig -c ups.basic status=mains event=onmains

  # something to go in /etc/apcupsd/onbattery perhaps:
  xpl-sender -i eth0 -m xpl-trig -c ups.basic status=battery event=onbattery

=head1 DESCRIPTION

This script is an xPL client that sends an xPL message based on
command line arguments.

=cut

use strict;
use warnings;
use Getopt::Std;
use xPL::Client;
$|=1; # autoflush helps debugging

sub HELP_MESSAGE {
  my $msg = shift || q{};
  die
qq{Usage: $0 [flags] [options] -m <msg.type> -c <class.type> [param=value ... ]
where valid flags are:
  -h - show this help text
  -v - verbose mode
and valid options are (default shown in brackets):
  -i if0        - the inferface for xPL messages
                  (first non-loopback or loopback)
  -m xpl-type   - the xPL message type (xpl-cmnd, xpl-stat, or xpl-trig)
  -c class.type - the schema type
  -s source     - the source type
  -t target     - the target type
  -w time       - time to wait for a response (0 - don't wait)
$msg
};
}

my %args = ( vendor_id => 'bnz', device_id => 'sender', );
my %opt = ();
getopts('hvi:m:c:s:t:w:', \%opt);

if (exists $opt{'h'}) { HELP_MESSAGE() }

if (exists $opt{'i'}) {
  $args{interface} = $opt{'i'};
}
if (exists $opt{'v'}) {
  $args{verbose} = $opt{'v'};
}
my $wait = $opt{'w'};

my %msg_args = ();

exists $opt{'c'} or HELP_MESSAGE(q{Requires '-c' class type parameter});

foreach (qw/m c s t/) {
  if (exists $opt{$_}) {
    $msg_args{'-'.$_} = $opt{$_};
  }
}

# Create an xPL Client object
my $xpl = xPL::Client->new(%args) or die "Failed to create xPL::Client\n";

unless ($wait) {
  $xpl->send_from_arg_list(%msg_args, @ARGV);
  exit;
}

$xpl->add_xpl_callback(id => 'wait_for_hub',
                       self_skip => 0,
                       filter =>
                       {
                        class => 'hbeat',
                        class_type => 'app',
                        source => $xpl->id,
                       },
                       callback => \&xpl_hub_response);
$xpl->main_loop();

sub xpl_hub_response {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  print STDERR "Sending\n";
  my $class = $opt{'c'};
  $class =~ s/\..*$//;
  $xpl->remove_xpl_callback('wait_for_hub');
  $xpl->send_from_arg_list(%msg_args, @ARGV);
  $xpl->add_xpl_callback(id => 'wait_for_response',
                         filter =>
                         {
                          class => $class,
                         },
                         callback => \&xpl_response);
  $xpl->add_timer(id => 'timeout', timeout => $wait, callback => \&give_up);
  return;
}

sub xpl_response {
  my %p = @_;
  my $msg = $p{message};
  my $peeraddr = $p{peeraddr};
  my $peerport = $p{peerport};

  print $opt{'v'} ? $msg->string : $msg->summary ,"\n";
}

sub give_up {
  exit 1;
}

=head1 SEE ALSO

xPL::Client(3), xPL::Listener(3)

Project website: http://www.xpl-perl.org.uk/

=head1 AUTHOR

Mark Hindess, E<lt>xpl-perl@beanz.uklinux.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2005, 2007 by Mark Hindess

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.7 or,
at your option, any later version of Perl 5 you may have available.

=cut
